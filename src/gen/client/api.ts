/* tslint:disable */
/* eslint-disable */
/**
 * formekou-api
 * Api that can manage forms
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface CreateForm
 */
export interface CreateForm {
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  color?: string;
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  openedAt?: string;
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  closedAt?: string;
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof CreateForm
   */
  updatedAt?: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateForm
   */
  isPrivate?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateForm
   */
  allowMultipleResponse?: boolean;
}
/**
 *
 * @export
 * @interface Dummy
 */
export interface Dummy {
  /**
   *
   * @type {string}
   * @memberof Dummy
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Dummy
   */
  name?: string;
}
/**
 *
 * @export
 * @interface Form
 */
export interface Form {
  /**
   *
   * @type {Array<Question>}
   * @memberof Form
   */
  questions?: Array<Question>;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  color?: string;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  openedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  closedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Form
   */
  updatedAt?: string;
  /**
   *
   * @type {boolean}
   * @memberof Form
   */
  isPrivate?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Form
   */
  allowMultipleResponse?: boolean;
}
/**
 *
 * @export
 * @interface Option
 */
export interface Option {
  /**
   *
   * @type {string}
   * @memberof Option
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Option
   */
  value?: string;
  /**
   *
   * @type {boolean}
   * @memberof Option
   */
  isCorrect?: boolean;
  /**
   *
   * @type {number}
   * @memberof Option
   */
  points?: number;
}
/**
 *
 * @export
 * @interface Question
 */
export interface Question {
  /**
   *
   * @type {string}
   * @memberof Question
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Question
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof Question
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof Question
   */
  points?: number;
  /**
   *
   * @type {boolean}
   * @memberof Question
   */
  isRequired?: boolean;
  /**
   *
   * @type {QuestionType}
   * @memberof Question
   */
  type?: QuestionType;
  /**
   *
   * @type {Array<Option>}
   * @memberof Question
   */
  options?: Array<Option>;
}

/**
 *
 * @export
 * @enum {string}
 */

export const QuestionType = {
  Text: "TEXT",
  Number: "NUMBER",
  Checkbox: "CHECKBOX",
  Radio: "RADIO",
  Paragraph: "PARAGRAPH",
} as const;

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType];

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profilePicture?: string;
}

/**
 * FormsApi - axios parameter creator
 * @export
 */
export const FormsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create or Update forms
     * @param {CreateForm} [createForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateForm: async (
      createForm?: CreateForm,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/forms`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createForm,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create or Update forms\'s questions
     * @param {string} formId Id the form
     * @param {Array<Question>} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateFormQuestions: async (
      formId: string,
      question?: Array<Question>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'formId' is not null or undefined
      assertParamExists("crupdateFormQuestions", "formId", formId);
      const localVarPath = `/forms/{formId}/questions`.replace(
        `{${"formId"}}`,
        encodeURIComponent(String(formId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        question,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one form using id
     * @param {string} formId Id the form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFormById: async (
      formId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'formId' is not null or undefined
      assertParamExists("deleteFormById", "formId", formId);
      const localVarPath = `/forms/{formId}`.replace(
        `{${"formId"}}`,
        encodeURIComponent(String(formId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one form using id
     * @param {string} formId Id the form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFormById: async (
      formId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'formId' is not null or undefined
      assertParamExists("getFormById", "formId", formId);
      const localVarPath = `/forms/{formId}`.replace(
        `{${"formId"}}`,
        encodeURIComponent(String(formId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get own forms
     * @param {string} [sort]
     * @param {Form} [form]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOwnForms: async (
      sort?: string,
      form?: Form,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/forms`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        form,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FormsApi - functional programming interface
 * @export
 */
export const FormsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FormsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create or Update forms
     * @param {CreateForm} [createForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateForm(
      createForm?: CreateForm,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.crupdateForm(
        createForm,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FormsApi.crupdateForm"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create or Update forms\'s questions
     * @param {string} formId Id the form
     * @param {Array<Question>} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateFormQuestions(
      formId: string,
      question?: Array<Question>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdateFormQuestions(
          formId,
          question,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FormsApi.crupdateFormQuestions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete one form using id
     * @param {string} formId Id the form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFormById(
      formId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFormById(
        formId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FormsApi.deleteFormById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get one form using id
     * @param {string} formId Id the form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFormById(
      formId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFormById(
        formId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FormsApi.getFormById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get own forms
     * @param {string} [sort]
     * @param {Form} [form]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOwnForms(
      sort?: string,
      form?: Form,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnForms(
        sort,
        form,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FormsApi.getOwnForms"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * FormsApi - factory interface
 * @export
 */
export const FormsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FormsApiFp(configuration);
  return {
    /**
     *
     * @summary Create or Update forms
     * @param {CreateForm} [createForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateForm(createForm?: CreateForm, options?: any): AxiosPromise<Form> {
      return localVarFp
        .crupdateForm(createForm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create or Update forms\'s questions
     * @param {string} formId Id the form
     * @param {Array<Question>} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateFormQuestions(
      formId: string,
      question?: Array<Question>,
      options?: any
    ): AxiosPromise<Form> {
      return localVarFp
        .crupdateFormQuestions(formId, question, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one form using id
     * @param {string} formId Id the form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFormById(formId: string, options?: any): AxiosPromise<Form> {
      return localVarFp
        .deleteFormById(formId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one form using id
     * @param {string} formId Id the form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFormById(formId: string, options?: any): AxiosPromise<Form> {
      return localVarFp
        .getFormById(formId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get own forms
     * @param {string} [sort]
     * @param {Form} [form]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOwnForms(sort?: string, form?: Form, options?: any): AxiosPromise<Form> {
      return localVarFp
        .getOwnForms(sort, form, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
export class FormsApi extends BaseAPI {
  /**
   *
   * @summary Create or Update forms
   * @param {CreateForm} [createForm]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FormsApi
   */
  public crupdateForm(
    createForm?: CreateForm,
    options?: RawAxiosRequestConfig
  ) {
    return FormsApiFp(this.configuration)
      .crupdateForm(createForm, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create or Update forms\'s questions
   * @param {string} formId Id the form
   * @param {Array<Question>} [question]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FormsApi
   */
  public crupdateFormQuestions(
    formId: string,
    question?: Array<Question>,
    options?: RawAxiosRequestConfig
  ) {
    return FormsApiFp(this.configuration)
      .crupdateFormQuestions(formId, question, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one form using id
   * @param {string} formId Id the form
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FormsApi
   */
  public deleteFormById(formId: string, options?: RawAxiosRequestConfig) {
    return FormsApiFp(this.configuration)
      .deleteFormById(formId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one form using id
   * @param {string} formId Id the form
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FormsApi
   */
  public getFormById(formId: string, options?: RawAxiosRequestConfig) {
    return FormsApiFp(this.configuration)
      .getFormById(formId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get own forms
   * @param {string} [sort]
   * @param {Form} [form]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FormsApi
   */
  public getOwnForms(
    sort?: string,
    form?: Form,
    options?: RawAxiosRequestConfig
  ) {
    return FormsApiFp(this.configuration)
      .getOwnForms(sort, form, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get all dummies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDummies: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/dummy-table`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Pong
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/ping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get all dummies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDummies(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dummy>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDummies(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["HealthApi.getDummies"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Pong
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ping(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["HealthApi.ping"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HealthApiFp(configuration);
  return {
    /**
     *
     * @summary Get all dummies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDummies(options?: any): AxiosPromise<Dummy> {
      return localVarFp
        .getDummies(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Pong
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: any): AxiosPromise<string> {
      return localVarFp
        .ping(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
  /**
   *
   * @summary Get all dummies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public getDummies(options?: RawAxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .getDummies(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Pong
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public ping(options?: RawAxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .ping(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Tell who you are using firebase token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWhoAmi: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/whoami`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Tell who you are using firebase token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWhoAmi(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getWhoAmi(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SecurityApi.getWhoAmi"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SecurityApiFp(configuration);
  return {
    /**
     *
     * @summary Tell who you are using firebase token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWhoAmi(options?: any): AxiosPromise<User> {
      return localVarFp
        .getWhoAmi(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
  /**
   *
   * @summary Tell who you are using firebase token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public getWhoAmi(options?: RawAxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .getWhoAmi(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary get one user by id
     * @param {string} userId Id the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (
      userId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserById", "userId", userId);
      const localVarPath = `/users/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update your profile
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfile: async (
      user?: User,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary get one user by id
     * @param {string} userId Id the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      userId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(
        userId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getUserById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update your profile
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfile(
      user?: User,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfile(
        user,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.updateProfile"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @summary get one user by id
     * @param {string} userId Id the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUserById(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update your profile
     * @param {User} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfile(user?: User, options?: any): AxiosPromise<User> {
      return localVarFp
        .updateProfile(user, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary get one user by id
   * @param {string} userId Id the user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUserById(userId: string, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getUserById(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update your profile
   * @param {User} [user]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateProfile(user?: User, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .updateProfile(user, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
